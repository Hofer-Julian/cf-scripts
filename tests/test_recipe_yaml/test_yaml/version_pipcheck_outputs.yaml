schema_version: 1

context:
  name: camb
  version: 1.0.12

recipe:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  url: https://github.com/cmbant/CAMB/archive/${{ version }}.tar.gz
  sha256: 26e16420d027d07bb36c08e2a4397e1a09feb7221409702d9ae5d30a55a3a17d

build:
  number: 1

requirements:
  build:
    - if: not win
      then: ${{ compiler('c') }}
    - if: not win
      then: ${{ compiler('fortran') }}
    - if: win
      then: m2w64-toolchain
    - if: not win
      then: git
    - if: win
      then: m2-git
    - if: not win
      then: make
    - if: win
      then: m2-make
    - python
    - setuptools
    - pip

outputs:
  - package:
      name: camb
    requirements:
      build:
        # these are needed to convince conda-build to pin the requirements
        - if: not win
          then: ${{ compiler('c') }}
        - if: not win
          then: ${{ compiler('fortran') }}
      host:
        - python
        - pip
        - setuptools
      run:
        - python
        - numpy
        - matplotlib
        - six
        - mock
        - sympy >=1.0
        - scipy >=1.0
        - if: not win
          then: ${{ compiler('fortran') }}
    test:  # [not win]
      imports:  # [not win]
        - camb  # [not win]
    tests:
      - python:
          imports:
            - if: win
              then: camb
          pip_check: false
    script: install-pycamb.sh  # [not win]
    script: install-pycamb.bat  # [win]
  - package:
      name: pycamb
    requirements:
      host:
        - python
      run:
        - python
        - ${{ pin_subpackage('camb', exact=True) }}
    tests:
      - python:
          imports:
            - camb
          pip_check: false

tests:
  - python:
      imports:
        - camb
  - commands:
      - "echo '2'"
    files:
      recipe:
        - params.ini
        - test_pycamb.py
        - if: win
          then: run_test.sh
    script:
      - if: win
        then: "echo '2'"

about:
  license: modified LGPL
  license_file: ${{ RECIPE_DIR }}/LICENSE
  summary: Code for Anisotropies in the Microwave Background
  description: |
    Code for Anisotropies in the Microwave Background
    by Antony Lewis and Anthony Challinor

    Features:
    - Support for closed, open and flat models
    - Scalar, vector and tensor modes including polarization
    - Output Cl, matter transfer functions, matter power spectrum and Ïƒ8
    - Fast computation to ~0.3-0.1% accuracy, with controllable accuracy level
    - Relatively structured and easily extendable Fortran 90 code
    - Efficient support for massive neutrinos
    - Absolute computations from correctly normalized initial power spectra
    - Computation of lensed CMB power spectra and lensing potential power spectrum
    - Internally parallelized for fast execution on multi-processor machines
    - Use CAMB with CosmoMC for Monte-Carlo parameter estimation
    - Constant equation of state quintessence (or variable PPF)
    - Support for general correlated adiabatic/isocurvature initial conditions
    - Accurate full-sky calculation of lensed power spectra (astro-ph/0502425)
    - Integrated interface to HALOFIT for non-linear fitting
    - support for arbitrary neutrino mass splittings
    - For 21cm, lensing and number count power spectra see this extension
    - For perturbed recombination and effect on small-scale baryons see this extension
    - Calculation of local primordial and CMB lensing bispectra
    - Easy-to-use Python wrapper
  homepage: https://camb.info/
  repository: https://github.com/cmbant/CAMB
  documentation: https://camb.info/readme.html

extra:
  recipe-maintainers:
    - beckermr
    - cmbant

