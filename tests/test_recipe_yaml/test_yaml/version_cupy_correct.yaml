schema_version: 1

context:
  name: cupy
  version: 8.5.0
  sha256: fb3f8d3b3454beb249b9880502a45fe493c5a44efacc4c72914cbe1a5dbdf803

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  - url: https://pypi.io/packages/source/${{ name[0] }}/${{ name }}/${{ name }}-${{ version }}.tar.gz
    sha256: ${{ sha256 }}

build:
  number: 0
  skip:
    - "win or not linux64 or cuda_compiler_version in (undefined, \"None\")"
  script:
    # CuPy default detects CUDA from nvcc, but on Conda-Forge's dockers nvcc lives in a different place...
    - export NVCC=$(which nvcc)
    # With conda-forge/nvcc-feedstock#58, CUDA_PATH is set correctly
    - "echo \"nvcc is $NVCC, CUDA path is $CUDA_PATH\""
    - ${{ PYTHON }} -m pip install . --no-deps -vv
    # copy activate/deactivate scripts
    - "mkdir -p \"${PREFIX}/etc/conda/activate.d\""
    - "cp \"${RECIPE_DIR}/activate.sh\" \"${PREFIX}/etc/conda/activate.d/cupy_activate.sh\""
    - "mkdir -p \"${PREFIX}/etc/conda/deactivate.d\""
    - "cp \"${RECIPE_DIR}/deactivate.sh\" \"${PREFIX}/etc/conda/deactivate.d/cupy_deactivate.sh\""
  dynamic_linking:
    missing_dso_allowlist:
      - "*/libcuda.*"

requirements:
  build:
    - ${{ compiler("c") }}
    - ${{ compiler("cxx") }}
    - ${{ compiler("cuda") }}
    - if: "linux64 and cdt_name == \"cos7\""
      then: sysroot_linux-64 2.17
  host:
    - python
    - pip
    - setuptools
    - cython >=0.24.0
    - fastrlock >=0.3
    - cudnn
    - nccl
    - if:
        - "cuda_compiler_version in (\"10.1\", \"10.2\", \"11.0\", \"11.1\", \"11.2\") and cdt_name"
        - "== \"cos7\""
      then: cutensor
  run:
    - python
    - setuptools
    - fastrlock >=0.3
    - numpy >=1.16
    - six >=1.9.0
    # - cudnn  <-- added via run_export
    # - nccl   <-- added via run_export
    # - cutensor  <-- added via run_export
  run_constraints:
    - if: "linux64 and cdt_name == \"cos7\""
      then: __glibc >=2.17

tests:
  - python:
      pip_check: false
  - files:
      source:
        - tests
    requirements:
      run:
        - pytest
        - mock
        - ${{ compiler("c") }}
        - ${{ compiler("cxx") }}
        - ${{ compiler("cuda") }}

about:
  license: MIT
  license_file: LICENSE
  summary: CuPy is an implementation of a NumPy-compatible multi-dimensional array on CUDA.
  homepage: https://cupy.dev/
  repository: https://github.com/cupy/cupy/
  documentation: https://docs.cupy.dev/en/stable/

extra:
  recipe-maintainers:
    - jakirkham
    - leofang
    - kmaehashi
    - asi1024
    - emcastillo
    - toslunar

